// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET balance = balance + $1
WHERE id = $2
RETURNING id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status
`

type AddAccountBalanceParams struct {
	Amount pgtype.Numeric `json:"amount"`
	ID     int64          `json:"id"`
}

type AddAccountBalanceRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (AddAccountBalanceRow, error) {
	row := q.db.QueryRow(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i AddAccountBalanceRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const countAccounts = `-- name: CountAccounts :one
SELECT COUNT(*) FROM accounts
WHERE deleted_at IS NULL
`

func (q *Queries) CountAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAccountsByUserUUID = `-- name: CountAccountsByUserUUID :one
SELECT COUNT(*) FROM accounts
WHERE deleted_at IS NULL AND user_uuid = $1
`

func (q *Queries) CountAccountsByUserUUID(ctx context.Context, userUuid uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAccountsByUserUUID, userUuid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  owner,
  balance,
  user_uuid,
  currency,
  status
) VALUES (
  $1, $2, $3, $4, 1
) RETURNING id, owner,  currency, balance, user_uuid, account_uuid, status, created_at
`

type CreateAccountParams struct {
	Owner    string         `json:"owner"`
	Balance  pgtype.Numeric `json:"balance"`
	UserUuid uuid.UUID      `json:"user_uuid"`
	Currency string         `json:"currency"`
}

type CreateAccountRow struct {
	ID          int64          `json:"id"`
	Owner       string         `json:"owner"`
	Currency    string         `json:"currency"`
	Balance     pgtype.Numeric `json:"balance"`
	UserUuid    uuid.UUID      `json:"user_uuid"`
	AccountUuid uuid.UUID      `json:"account_uuid"`
	Status      int16          `json:"status"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Owner,
		arg.Balance,
		arg.UserUuid,
		arg.Currency,
	)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.AccountUuid,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND id = $1 LIMIT 1
`

type GetAccountRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
}

func (q *Queries) GetAccount(ctx context.Context, id int64) (GetAccountRow, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const getAccountByUUID = `-- name: GetAccountByUUID :one
SELECT id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND account_uuid = $1 LIMIT 1
`

type GetAccountByUUIDRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
}

func (q *Queries) GetAccountByUUID(ctx context.Context, accountUuid uuid.UUID) (GetAccountByUUIDRow, error) {
	row := q.db.QueryRow(ctx, getAccountByUUID, accountUuid)
	var i GetAccountByUUIDRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const getAccountByUserUUID = `-- name: GetAccountByUserUUID :one
SELECT id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND user_uuid = $1 LIMIT 1
`

type GetAccountByUserUUIDRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
}

func (q *Queries) GetAccountByUserUUID(ctx context.Context, userUuid uuid.UUID) (GetAccountByUserUUIDRow, error) {
	row := q.db.QueryRow(ctx, getAccountByUserUUID, userUuid)
	var i GetAccountByUserUUIDRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const getAccountByUserUUIDAndCurrency = `-- name: GetAccountByUserUUIDAndCurrency :one
SELECT id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND user_uuid = $1 AND currency = $2 LIMIT 1
`

type GetAccountByUserUUIDAndCurrencyParams struct {
	UserUuid uuid.UUID `json:"user_uuid"`
	Currency string    `json:"currency"`
}

type GetAccountByUserUUIDAndCurrencyRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
}

func (q *Queries) GetAccountByUserUUIDAndCurrency(ctx context.Context, arg GetAccountByUserUUIDAndCurrencyParams) (GetAccountByUserUUIDAndCurrencyRow, error) {
	row := q.db.QueryRow(ctx, getAccountByUserUUIDAndCurrency, arg.UserUuid, arg.Currency)
	var i GetAccountByUserUUIDAndCurrencyRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const getAccountByUserUUIDMany = `-- name: GetAccountByUserUUIDMany :many
SELECT id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND user_uuid = $1
`

type GetAccountByUserUUIDManyRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
}

func (q *Queries) GetAccountByUserUUIDMany(ctx context.Context, userUuid uuid.UUID) ([]GetAccountByUserUUIDManyRow, error) {
	rows, err := q.db.Query(ctx, getAccountByUserUUIDMany, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountByUserUUIDManyRow{}
	for rows.Next() {
		var i GetAccountByUserUUIDManyRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Currency,
			&i.Balance,
			&i.UserUuid,
			&i.CreatedAt,
			&i.AccountUuid,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, owner,  currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND id = $1 LIMIT 1
FOR NO KEY UPDATE
`

type GetAccountForUpdateRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
}

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (GetAccountForUpdateRow, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, id)
	var i GetAccountForUpdateRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT accounts.id, owner, currency, balance, accounts.user_uuid, accounts.created_at, account_uuid, accounts.updated_at, accounts.deleted_at, status, u.email, u.full_name, u.username FROM accounts
LEFT JOIN users u ON accounts.user_uuid = u.user_uuid
WHERE accounts.deleted_at IS NULL
ORDER BY accounts.id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAccountsRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
	Email       pgtype.Text        `json:"email"`
	FullName    pgtype.Text        `json:"full_name"`
	Username    pgtype.Text        `json:"username"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]ListAccountsRow, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountsRow{}
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Currency,
			&i.Balance,
			&i.UserUuid,
			&i.CreatedAt,
			&i.AccountUuid,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Status,
			&i.Email,
			&i.FullName,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountsByUserUUID = `-- name: ListAccountsByUserUUID :many
SELECT accounts.id, owner, currency, balance, accounts.user_uuid, accounts.created_at, account_uuid, accounts.updated_at, accounts.deleted_at, status, u.email, u.full_name, u.username FROM accounts
LEFT JOIN users u ON accounts.user_uuid = u.user_uuid
WHERE accounts.deleted_at IS NULL AND accounts.user_uuid = $1
ORDER BY accounts.id
LIMIT $2
OFFSET $3
`

type ListAccountsByUserUUIDParams struct {
	UserUuid uuid.UUID `json:"user_uuid"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

type ListAccountsByUserUUIDRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
	Email       pgtype.Text        `json:"email"`
	FullName    pgtype.Text        `json:"full_name"`
	Username    pgtype.Text        `json:"username"`
}

func (q *Queries) ListAccountsByUserUUID(ctx context.Context, arg ListAccountsByUserUUIDParams) ([]ListAccountsByUserUUIDRow, error) {
	rows, err := q.db.Query(ctx, listAccountsByUserUUID, arg.UserUuid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountsByUserUUIDRow{}
	for rows.Next() {
		var i ListAccountsByUserUUIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Currency,
			&i.Balance,
			&i.UserUuid,
			&i.CreatedAt,
			&i.AccountUuid,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Status,
			&i.Email,
			&i.FullName,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteAccount = `-- name: SoftDeleteAccount :exec
UPDATE accounts
SET deleted_at = now()
WHERE id = $1
RETURNING id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status
`

func (q *Queries) SoftDeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteAccount, id)
	return err
}

const subtractAccountBalance = `-- name: SubtractAccountBalance :one
UPDATE accounts
SET balance = balance - $1
WHERE id = $2
RETURNING id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status
`

type SubtractAccountBalanceParams struct {
	Amount pgtype.Numeric `json:"amount"`
	ID     int64          `json:"id"`
}

type SubtractAccountBalanceRow struct {
	ID          int64              `json:"id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
}

func (q *Queries) SubtractAccountBalance(ctx context.Context, arg SubtractAccountBalanceParams) (SubtractAccountBalanceRow, error) {
	row := q.db.QueryRow(ctx, subtractAccountBalance, arg.Amount, arg.ID)
	var i SubtractAccountBalanceRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
WITH updated_account AS (
    UPDATE accounts
    SET balance = $2, updated_at = now()
    WHERE accounts.id = $1
    RETURNING id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status
)
SELECT
    ua.id AS account_id,
    ua.owner,
    ua.currency,
    ua.balance,
    ua.user_uuid,
    ua.created_at,
    ua.account_uuid,
    ua.updated_at,
    ua.deleted_at,
    ua.status,
    u.full_name,  -- Add desired user columns here
    u.username,  -- Add desired user columns here
    u.email      -- Add desired user columns here
FROM
    updated_account ua
LEFT JOIN
    users u ON ua.user_uuid = u.user_uuid
`

type UpdateAccountParams struct {
	ID      int64          `json:"id"`
	Balance pgtype.Numeric `json:"balance"`
}

type UpdateAccountRow struct {
	AccountID   int64              `json:"account_id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
	FullName    pgtype.Text        `json:"full_name"`
	Username    pgtype.Text        `json:"username"`
	Email       pgtype.Text        `json:"email"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.Balance)
	var i UpdateAccountRow
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
		&i.FullName,
		&i.Username,
		&i.Email,
	)
	return i, err
}

const updateProfileAccount = `-- name: UpdateProfileAccount :one
WITH updated_account AS (
  UPDATE accounts
  SET owner = $2, currency = $3, status = $4, updated_at = now()
  WHERE account_uuid = $1
  RETURNING id, owner, currency, balance, user_uuid, created_at, account_uuid, updated_at, deleted_at, status
)
SELECT
    ua.id AS account_id,
    ua.owner,
    ua.currency,
    ua.balance,
    ua.user_uuid,
    ua.created_at,
    ua.account_uuid,
    ua.updated_at,
    ua.deleted_at,
    ua.status,
    u.full_name,  -- Add desired user columns here
    u.username,  -- Add desired user columns here
    u.email      -- Add desired user columns here
FROM
    updated_account ua
LEFT JOIN
    users u ON ua.user_uuid = u.user_uuid
`

type UpdateProfileAccountParams struct {
	AccountUuid uuid.UUID `json:"account_uuid"`
	Owner       string    `json:"owner"`
	Currency    string    `json:"currency"`
	Status      int16     `json:"status"`
}

type UpdateProfileAccountRow struct {
	AccountID   int64              `json:"account_id"`
	Owner       string             `json:"owner"`
	Currency    string             `json:"currency"`
	Balance     pgtype.Numeric     `json:"balance"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	CreatedAt   time.Time          `json:"created_at"`
	AccountUuid uuid.UUID          `json:"account_uuid"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	Status      int16              `json:"status"`
	FullName    pgtype.Text        `json:"full_name"`
	Username    pgtype.Text        `json:"username"`
	Email       pgtype.Text        `json:"email"`
}

func (q *Queries) UpdateProfileAccount(ctx context.Context, arg UpdateProfileAccountParams) (UpdateProfileAccountRow, error) {
	row := q.db.QueryRow(ctx, updateProfileAccount,
		arg.AccountUuid,
		arg.Owner,
		arg.Currency,
		arg.Status,
	)
	var i UpdateProfileAccountRow
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.UserUuid,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
		&i.FullName,
		&i.Username,
		&i.Email,
	)
	return i, err
}
