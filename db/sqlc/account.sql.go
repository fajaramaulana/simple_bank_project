// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET balance = balance + $1
WHERE id = $2
RETURNING id, owner, email, currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at, status
`

type AddAccountBalanceParams struct {
	Amount string `json:"amount"`
	ID     int64  `json:"id"`
}

type AddAccountBalanceRow struct {
	ID           int64        `json:"id"`
	Owner        string       `json:"owner"`
	Email        string       `json:"email"`
	Currency     string       `json:"currency"`
	Balance      string       `json:"balance"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	AccountUuid  uuid.UUID    `json:"account_uuid"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	Status       int32        `json:"status"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (AddAccountBalanceRow, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i AddAccountBalanceRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Currency,
		&i.Balance,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const countAccounts = `-- name: CountAccounts :one
SELECT COUNT(*) FROM accounts
WHERE deleted_at IS NULL
`

func (q *Queries) CountAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  owner,
  email,
  password,
  balance,
  currency,
  refresh_token,
  status
) VALUES (
  $1, $2, $3, $4, $5, $6, 1
) RETURNING id, owner, email,  currency, balance, refresh_token, account_uuid, status, created_at
`

type CreateAccountParams struct {
	Owner        string `json:"owner"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	Balance      string `json:"balance"`
	Currency     string `json:"currency"`
	RefreshToken string `json:"refresh_token"`
}

type CreateAccountRow struct {
	ID           int64     `json:"id"`
	Owner        string    `json:"owner"`
	Email        string    `json:"email"`
	Currency     string    `json:"currency"`
	Balance      string    `json:"balance"`
	RefreshToken string    `json:"refresh_token"`
	AccountUuid  uuid.UUID `json:"account_uuid"`
	Status       int32     `json:"status"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Owner,
		arg.Email,
		arg.Password,
		arg.Balance,
		arg.Currency,
		arg.RefreshToken,
	)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Currency,
		&i.Balance,
		&i.RefreshToken,
		&i.AccountUuid,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, email, currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND id = $1 LIMIT 1
`

type GetAccountRow struct {
	ID           int64        `json:"id"`
	Owner        string       `json:"owner"`
	Email        string       `json:"email"`
	Currency     string       `json:"currency"`
	Balance      string       `json:"balance"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	AccountUuid  uuid.UUID    `json:"account_uuid"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	Status       int32        `json:"status"`
}

func (q *Queries) GetAccount(ctx context.Context, id int64) (GetAccountRow, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Currency,
		&i.Balance,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, account_uuid, owner, email, password, status FROM accounts
WHERE deleted_at IS NULL AND email = $1 LIMIT 1
`

type GetAccountByEmailRow struct {
	ID          int64     `json:"id"`
	AccountUuid uuid.UUID `json:"account_uuid"`
	Owner       string    `json:"owner"`
	Email       string    `json:"email"`
	Password    string    `json:"password"`
	Status      int32     `json:"status"`
}

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (GetAccountByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i GetAccountByEmailRow
	err := row.Scan(
		&i.ID,
		&i.AccountUuid,
		&i.Owner,
		&i.Email,
		&i.Password,
		&i.Status,
	)
	return i, err
}

const getAccountByUUID = `-- name: GetAccountByUUID :one
SELECT id, owner, email, currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND account_uuid = $1 LIMIT 1
`

type GetAccountByUUIDRow struct {
	ID           int64        `json:"id"`
	Owner        string       `json:"owner"`
	Email        string       `json:"email"`
	Currency     string       `json:"currency"`
	Balance      string       `json:"balance"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	AccountUuid  uuid.UUID    `json:"account_uuid"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	Status       int32        `json:"status"`
}

func (q *Queries) GetAccountByUUID(ctx context.Context, accountUuid uuid.UUID) (GetAccountByUUIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUUID, accountUuid)
	var i GetAccountByUUIDRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Currency,
		&i.Balance,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, owner, email,  currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at, status FROM accounts
WHERE deleted_at IS NULL AND id = $1 LIMIT 1
FOR NO KEY UPDATE
`

type GetAccountForUpdateRow struct {
	ID           int64        `json:"id"`
	Owner        string       `json:"owner"`
	Email        string       `json:"email"`
	Currency     string       `json:"currency"`
	Balance      string       `json:"balance"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	AccountUuid  uuid.UUID    `json:"account_uuid"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	Status       int32        `json:"status"`
}

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (GetAccountForUpdateRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i GetAccountForUpdateRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Currency,
		&i.Balance,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, email, currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at , status FROM accounts
WHERE deleted_at IS NULL
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAccountsRow struct {
	ID           int64        `json:"id"`
	Owner        string       `json:"owner"`
	Email        string       `json:"email"`
	Currency     string       `json:"currency"`
	Balance      string       `json:"balance"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	AccountUuid  uuid.UUID    `json:"account_uuid"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	Status       int32        `json:"status"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]ListAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountsRow{}
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Email,
			&i.Currency,
			&i.Balance,
			&i.RefreshToken,
			&i.CreatedAt,
			&i.AccountUuid,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteAccount = `-- name: SoftDeleteAccount :exec
UPDATE accounts
SET deleted_at = now()
WHERE id = $1
RETURNING id, owner, email, currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at, status
`

func (q *Queries) SoftDeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, softDeleteAccount, id)
	return err
}

const subtractAccountBalance = `-- name: SubtractAccountBalance :one
UPDATE accounts
SET balance = balance - $1
WHERE id = $2
RETURNING id, owner, email, currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at, status
`

type SubtractAccountBalanceParams struct {
	Amount string `json:"amount"`
	ID     int64  `json:"id"`
}

type SubtractAccountBalanceRow struct {
	ID           int64        `json:"id"`
	Owner        string       `json:"owner"`
	Email        string       `json:"email"`
	Currency     string       `json:"currency"`
	Balance      string       `json:"balance"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	AccountUuid  uuid.UUID    `json:"account_uuid"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	Status       int32        `json:"status"`
}

func (q *Queries) SubtractAccountBalance(ctx context.Context, arg SubtractAccountBalanceParams) (SubtractAccountBalanceRow, error) {
	row := q.db.QueryRowContext(ctx, subtractAccountBalance, arg.Amount, arg.ID)
	var i SubtractAccountBalanceRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Currency,
		&i.Balance,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET balance = $2, updated_at = now()
WHERE id = $1
RETURNING id, owner, email, currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at, status
`

type UpdateAccountParams struct {
	ID      int64  `json:"id"`
	Balance string `json:"balance"`
}

type UpdateAccountRow struct {
	ID           int64        `json:"id"`
	Owner        string       `json:"owner"`
	Email        string       `json:"email"`
	Currency     string       `json:"currency"`
	Balance      string       `json:"balance"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	AccountUuid  uuid.UUID    `json:"account_uuid"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	Status       int32        `json:"status"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Balance)
	var i UpdateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Currency,
		&i.Balance,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}

const updateProfileAccount = `-- name: UpdateProfileAccount :one
UPDATE accounts
SET owner = $2, currency = $3, status = $4, updated_at = now()
WHERE account_uuid = $1
RETURNING id, owner, email, currency, balance, refresh_token, created_at, account_uuid, updated_at, deleted_at, status
`

type UpdateProfileAccountParams struct {
	AccountUuid uuid.UUID `json:"account_uuid"`
	Owner       string    `json:"owner"`
	Currency    string    `json:"currency"`
	Status      int32     `json:"status"`
}

type UpdateProfileAccountRow struct {
	ID           int64        `json:"id"`
	Owner        string       `json:"owner"`
	Email        string       `json:"email"`
	Currency     string       `json:"currency"`
	Balance      string       `json:"balance"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	AccountUuid  uuid.UUID    `json:"account_uuid"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	Status       int32        `json:"status"`
}

func (q *Queries) UpdateProfileAccount(ctx context.Context, arg UpdateProfileAccountParams) (UpdateProfileAccountRow, error) {
	row := q.db.QueryRowContext(ctx, updateProfileAccount,
		arg.AccountUuid,
		arg.Owner,
		arg.Currency,
		arg.Status,
	)
	var i UpdateProfileAccountRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Currency,
		&i.Balance,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.AccountUuid,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Status,
	)
	return i, err
}
